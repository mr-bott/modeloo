from flask import Flask, request, send_file, render_template_string
import cv2
import numpy as np
from PIL import Image
import io
import base64

app = Flask(__name__)

# HTML template with upload form and preview
HTML_TEMPLATE = '''
<!DOCTYPE html>
<html>
<head>
    <title>Image Reflection Removal</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        .container { text-align: center; }
        .image-preview { margin: 20px 0; }
        img { max-width: 100%; height: auto; margin: 10px 0; }
        .button { 
            background-color: #4CAF50;
            border: none;
            color: white;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            border-radius: 4px;
        }
        input[type=file] {
            padding: 10px;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Image Reflection Removal Tool</h1>
        <form action="/process" method="post" enctype="multipart/form-data">
            <input type="file" name="image" accept="image/*" required>
            <br>
            <input type="submit" value="Remove Reflection" class="button">
        </form>
        
        {% if original_image %}
        <div class="image-preview">
            <h2>Original Image</h2>
            <img src="data:image/jpeg;base64,{{ original_image }}" alt="Original Image">
        </div>
        {% endif %}
        
        {% if processed_image %}
        <div class="image-preview">
            <h2>Processed Image (Reflection Removed)</h2>
            <img src="data:image/jpeg;base64,{{ processed_image }}" alt="Processed Image">
        </div>
        {% endif %}
    </div>
</body>
</html>
'''

def remove_reflection(image):
    # Convert image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Find the middle point of the image
    height = image.shape[0]
    mid_point = height // 2
    
    # Keep only the top half of the image
    result = image[:mid_point, :]
    
    # Create a new image with water texture for bottom half
    water_texture = np.zeros((mid_point, image.shape[1], 3), dtype=np.uint8)
    
    # Sample water color from the middle area
    water_sample = image[mid_point-10:mid_point, :].mean(axis=(0, 1))
    water_texture[:] = water_sample
    
    # Add some random noise to make it look more natural
    noise = np.random.normal(0, 5, water_texture.shape).astype(np.uint8)
    water_texture = cv2.add(water_texture, noise)
    
    # Combine the original top half with the new bottom half
    final_result = np.vstack([result, water_texture])
    
    return final_result

@app.route('/')
def index():
    return render_template_string(HTML_TEMPLATE)

@app.route('/process', methods=['POST'])
def process_image():
    if 'image' not in request.files:
        return 'No image uploaded', 400
    
    file = request.files['image']
    
    # Read and process the image
    image_stream = io.BytesIO(file.read())
    image_stream.seek(0)
    
    # Convert to OpenCV format
    file_bytes = np.asarray(bytearray(image_stream.read()), dtype=np.uint8)
    image = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
    
    if image is None:
        return 'Invalid image', 400
    
    # Process the image
    processed_image = remove_reflection(image)
    
    # Convert images to base64 for display
    _, original_buffer = cv2.imencode('.jpg', image)
    _, processed_buffer = cv2.imencode('.jpg', processed_image)
    
    original_base64 = base64.b64encode(original_buffer).decode('utf-8')
    processed_base64 = base64.b64encode(processed_buffer).decode('utf-8')
    
    return render_template_string(
        HTML_TEMPLATE,
        original_image=original_base64,
        processed_image=processed_base64
    )

if __name__ == '__main__':
    app.run(debug=True)